# -*- coding:utf-8 -*-
"""
# 题目：现在有 a 到 z 26 个元素，编写程序打印 a 到 z 中任取 3 个
# 元素的组合（比如 打印 a b c ，d y z等）
思路：
我设想 a - z 每个字母给一个标记 0 或 1 ,如果为 1 的时候表示这个字符在组合中 ,如果为 0 那么表示这个字符不在组合中。

这样子，我们需要 26 个标记位。

这个时候我们会发现 ，当所有变量都在组合中时， 那么就是 26 个 1；当一个变量都不在集组合中时，就是 26 个 0。

我们把 26 个 1 和 26 个 0 看成数字，那么就是 0 和 (1 << 26) - 1。
那么其它的组合，肯定是 0 到 (1 << 26) - 1 之间的数字，对吧

比如
cba 就是 …0000000111
dcba 就是 …00000000001111

所以说 我们做一个循环 从 0 开始 到(1 << 26) - 1
然后只取有 3 个 1 的数字
然后再看对应的 1 代表哪个字符就可以了
 ————————————————
版权声明：本文为CSDN博主「Daotin」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/lvonve/article/details/53320680
"""
def

def output(n, c):
    if bit(n) == c:
        for i in range(26):
            if n & 1:
                print('%c'%str('a'+i))
            n = x >> 1
        print('\n')

if __name__ == "__main__":
    # 输出字符个数
    nums = 3
    # 26个字母
    N = 26
    X = (1 << N) - 1

    for i in range(X):
        output(i, nums)
